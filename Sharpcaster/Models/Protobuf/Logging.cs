// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logging.proto
#pragma warning disable
#region Designer generated code

using pb = Google.Protobuf;
using pbc = Google.Protobuf.Collections;
using pbr = Google.Protobuf.Reflection;
namespace Sharpcaster.Models.Protobuf
{
    /// <summary>Holder for reflection information generated from logging.proto</summary>
    public static partial class LoggingReflection
    {
        #region Descriptor
        /// <summary>File descriptor for logging.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static LoggingReflection()
        {
            byte[] descriptorData = System.Convert.FromBase64String(
                string.Concat(
                  "Cg1sb2dnaW5nLnByb3RvEiFleHRlbnNpb25zLmFwaS5jYXN0X2NoYW5uZWwu",
                  "cHJvdG8i/QQKC1NvY2tldEV2ZW50EjoKBHR5cGUYASABKA4yLC5leHRlbnNp",
                  "b25zLmFwaS5jYXN0X2NoYW5uZWwucHJvdG8uRXZlbnRUeXBlEhgKEHRpbWVz",
                  "dGFtcF9taWNyb3MYAiABKAMSDwoHZGV0YWlscxgDIAEoCRIYChBuZXRfcmV0",
                  "dXJuX3ZhbHVlGAQgASgFEhkKEW1lc3NhZ2VfbmFtZXNwYWNlGAUgASgJEkIK",
                  "C3JlYWR5X3N0YXRlGAYgASgOMi0uZXh0ZW5zaW9ucy5hcGkuY2FzdF9jaGFu",
                  "bmVsLnByb3RvLlJlYWR5U3RhdGUSTAoQY29ubmVjdGlvbl9zdGF0ZRgHIAEo",
                  "DjIyLmV4dGVuc2lvbnMuYXBpLmNhc3RfY2hhbm5lbC5wcm90by5Db25uZWN0",
                  "aW9uU3RhdGUSQAoKcmVhZF9zdGF0ZRgIIAEoDjIsLmV4dGVuc2lvbnMuYXBp",
                  "LmNhc3RfY2hhbm5lbC5wcm90by5SZWFkU3RhdGUSQgoLd3JpdGVfc3RhdGUY",
                  "CSABKA4yLS5leHRlbnNpb25zLmFwaS5jYXN0X2NoYW5uZWwucHJvdG8uV3Jp",
                  "dGVTdGF0ZRJCCgtlcnJvcl9zdGF0ZRgKIAEoDjItLmV4dGVuc2lvbnMuYXBp",
                  "LmNhc3RfY2hhbm5lbC5wcm90by5FcnJvclN0YXRlEl4KGmNoYWxsZW5nZV9y",
                  "ZXBseV9lcnJvcl90eXBlGAsgASgOMjouZXh0ZW5zaW9ucy5hcGkuY2FzdF9j",
                  "aGFubmVsLnByb3RvLkNoYWxsZW5nZVJlcGx5RXJyb3JUeXBlEhYKDm5zc19l",
                  "cnJvcl9jb2RlGAwgASgFIvQBChVBZ2dyZWdhdGVkU29ja2V0RXZlbnQSCgoC",
                  "aWQYASABKAUSEwoLZW5kcG9pbnRfaWQYAiABKAUSSQoRY2hhbm5lbF9hdXRo",
                  "X3R5cGUYAyABKA4yLi5leHRlbnNpb25zLmFwaS5jYXN0X2NoYW5uZWwucHJv",
                  "dG8uQ2hhbm5lbEF1dGgSRAoMc29ja2V0X2V2ZW50GAQgAygLMi4uZXh0ZW5z",
                  "aW9ucy5hcGkuY2FzdF9jaGFubmVsLnByb3RvLlNvY2tldEV2ZW50EhIKCmJ5",
                  "dGVzX3JlYWQYBSABKAMSFQoNYnl0ZXNfd3JpdHRlbhgGIAEoAyKxAQoDTG9n",
                  "ElkKF2FnZ3JlZ2F0ZWRfc29ja2V0X2V2ZW50GAEgAygLMjguZXh0ZW5zaW9u",
                  "cy5hcGkuY2FzdF9jaGFubmVsLnByb3RvLkFnZ3JlZ2F0ZWRTb2NrZXRFdmVu",
                  "dBIsCiRudW1fZXZpY3RlZF9hZ2dyZWdhdGVkX3NvY2tldF9ldmVudHMYAiAB",
                  "KAUSIQoZbnVtX2V2aWN0ZWRfc29ja2V0X2V2ZW50cxgDIAEoBSrABgoJRXZl",
                  "bnRUeXBlEhYKEkVWRU5UX1RZUEVfVU5LTk9XThAAEhcKE0NBU1RfU09DS0VU",
                  "X0NSRUFURUQQARIXChNSRUFEWV9TVEFURV9DSEFOR0VEEAISHAoYQ09OTkVD",
                  "VElPTl9TVEFURV9DSEFOR0VEEAMSFgoSUkVBRF9TVEFURV9DSEFOR0VEEAQS",
                  "FwoTV1JJVEVfU1RBVEVfQ0hBTkdFRBAFEhcKE0VSUk9SX1NUQVRFX0NIQU5H",
                  "RUQQBhISCg5DT05ORUNUX0ZBSUxFRBAHEhYKElRDUF9TT0NLRVRfQ09OTkVD",
                  "VBAIEh0KGVRDUF9TT0NLRVRfU0VUX0tFRVBfQUxJVkUQCRIYChRTU0xfQ0VS",
                  "VF9XSElURUxJU1RFRBAKEhYKElNTTF9TT0NLRVRfQ09OTkVDVBALEhUKEVNT",
                  "TF9JTkZPX09CVEFJTkVEEAwSGwoXREVSX0VOQ09ERURfQ0VSVF9PQlRBSU4Q",
                  "DRIcChhSRUNFSVZFRF9DSEFMTEVOR0VfUkVQTFkQDhIYChRBVVRIX0NIQUxM",
                  "RU5HRV9SRVBMWRAPEhUKEUNPTk5FQ1RfVElNRURfT1VUEBASFwoTU0VORF9N",
                  "RVNTQUdFX0ZBSUxFRBAREhQKEE1FU1NBR0VfRU5RVUVVRUQQEhIQCgxTT0NL",
                  "RVRfV1JJVEUQExITCg9NRVNTQUdFX1dSSVRURU4QFBIPCgtTT0NLRVRfUkVB",
                  "RBAVEhAKDE1FU1NBR0VfUkVBRBAWEhEKDVNPQ0tFVF9DTE9TRUQQGRIfChtT",
                  "U0xfQ0VSVF9FWENFU1NJVkVfTElGRVRJTUUQGhIbChdDSEFOTkVMX1BPTElD",
                  "WV9FTkZPUkNFRBAbEh8KG1RDUF9TT0NLRVRfQ09OTkVDVF9DT01QTEVURRAc",
                  "Eh8KG1NTTF9TT0NLRVRfQ09OTkVDVF9DT01QTEVURRAdEh0KGVNTTF9TT0NL",
                  "RVRfQ09OTkVDVF9GQUlMRUQQHhIeChpTRU5EX0FVVEhfQ0hBTExFTkdFX0ZB",
                  "SUxFRBAfEiAKHEFVVEhfQ0hBTExFTkdFX1JFUExZX0lOVkFMSUQQIBIUChBQ",
                  "SU5HX1dSSVRFX0VSUk9SECEqPgoLQ2hhbm5lbEF1dGgSFAoQU1NMX1VOS05P",
                  "V05fWkVSTxAAEgcKA1NTTBABEhAKDFNTTF9WRVJJRklFRBACKqMBCgpSZWFk",
                  "eVN0YXRlEhwKGFJFQURZX1NUQVRFX1VOS05PV05fWkVSTxAAEhQKEFJFQURZ",
                  "X1NUQVRFX05PTkUQARIaChZSRUFEWV9TVEFURV9DT05ORUNUSU5HEAISFAoQ",
                  "UkVBRFlfU1RBVEVfT1BFThADEhcKE1JFQURZX1NUQVRFX0NMT1NJTkcQBBIW",
                  "ChJSRUFEWV9TVEFURV9DTE9TRUQQBSqsAwoPQ29ubmVjdGlvblN0YXRlEhsK",
                  "F0NPTk5fU1RBVEVfVU5LTk9XTl9aRVJPEAASFgoSQ09OTl9TVEFURV9VTktO",
                  "T1dOEAESGgoWQ09OTl9TVEFURV9UQ1BfQ09OTkVDVBACEiMKH0NPTk5fU1RB",
                  "VEVfVENQX0NPTk5FQ1RfQ09NUExFVEUQAxIaChZDT05OX1NUQVRFX1NTTF9D",
                  "T05ORUNUEAQSIwofQ09OTl9TVEFURV9TU0xfQ09OTkVDVF9DT01QTEVURRAF",
                  "EiIKHkNPTk5fU1RBVEVfQVVUSF9DSEFMTEVOR0VfU0VORBAGEisKJ0NPTk5f",
                  "U1RBVEVfQVVUSF9DSEFMTEVOR0VfU0VORF9DT01QTEVURRAHEiwKKENPTk5f",
                  "U1RBVEVfQVVUSF9DSEFMTEVOR0VfUkVQTFlfQ09NUExFVEUQCBIcChhDT05O",
                  "X1NUQVRFX1NUQVJUX0NPTk5FQ1QQCRIXChNDT05OX1NUQVRFX0ZJTklTSEVE",
                  "EGQSFAoQQ09OTl9TVEFURV9FUlJPUhBlEhYKEkNPTk5fU1RBVEVfVElNRU9V",
                  "VBBmKsIBCglSZWFkU3RhdGUSGwoXUkVBRF9TVEFURV9VTktOT1dOX1pFUk8Q",
                  "ABIWChJSRUFEX1NUQVRFX1VOS05PV04QARITCg9SRUFEX1NUQVRFX1JFQUQQ",
                  "AhIcChhSRUFEX1NUQVRFX1JFQURfQ09NUExFVEUQAxIaChZSRUFEX1NUQVRF",
                  "X0RPX0NBTExCQUNLEAQSGwoXUkVBRF9TVEFURV9IQU5ETEVfRVJST1IQBRIU",
                  "ChBSRUFEX1NUQVRFX0VSUk9SEGQq4gEKCldyaXRlU3RhdGUSHAoYV1JJVEVf",
                  "U1RBVEVfVU5LTk9XTl9aRVJPEAASFwoTV1JJVEVfU1RBVEVfVU5LTk9XThAB",
                  "EhUKEVdSSVRFX1NUQVRFX1dSSVRFEAISHgoaV1JJVEVfU1RBVEVfV1JJVEVf",
                  "Q09NUExFVEUQAxIbChdXUklURV9TVEFURV9ET19DQUxMQkFDSxAEEhwKGFdS",
                  "SVRFX1NUQVRFX0hBTkRMRV9FUlJPUhAFEhUKEVdSSVRFX1NUQVRFX0VSUk9S",
                  "EGQSFAoQV1JJVEVfU1RBVEVfSURMRRBlKvsCCgpFcnJvclN0YXRlEh4KGkNI",
                  "QU5ORUxfRVJST1JfVU5LTk9XTl9aRVJPEAASFgoSQ0hBTk5FTF9FUlJPUl9O",
                  "T05FEAESIgoeQ0hBTk5FTF9FUlJPUl9DSEFOTkVMX05PVF9PUEVOEAISJgoi",
                  "Q0hBTk5FTF9FUlJPUl9BVVRIRU5USUNBVElPTl9FUlJPUhADEh8KG0NIQU5O",
                  "RUxfRVJST1JfQ09OTkVDVF9FUlJPUhAEEh4KGkNIQU5ORUxfRVJST1JfU09D",
                  "S0VUX0VSUk9SEAUSIQodQ0hBTk5FTF9FUlJPUl9UUkFOU1BPUlRfRVJST1IQ",
                  "BhIhCh1DSEFOTkVMX0VSUk9SX0lOVkFMSURfTUVTU0FHRRAHEiQKIENIQU5O",
                  "RUxfRVJST1JfSU5WQUxJRF9DSEFOTkVMX0lEEAgSIQodQ0hBTk5FTF9FUlJP",
                  "Ul9DT05ORUNUX1RJTUVPVVQQCRIZChVDSEFOTkVMX0VSUk9SX1VOS05PV04Q",
                  "CirYBgoXQ2hhbGxlbmdlUmVwbHlFcnJvclR5cGUSJgoiQ0hBTExFTkdFX1JF",
                  "UExZX0VSUk9SX1VOS05PV05fWkVSTxAAEh4KGkNIQUxMRU5HRV9SRVBMWV9F",
                  "UlJPUl9OT05FEAESKQolQ0hBTExFTkdFX1JFUExZX0VSUk9SX1BFRVJfQ0VS",
                  "VF9FTVBUWRACEiwKKENIQUxMRU5HRV9SRVBMWV9FUlJPUl9XUk9OR19QQVlM",
                  "T0FEX1RZUEUQAxIkCiBDSEFMTEVOR0VfUkVQTFlfRVJST1JfTk9fUEFZTE9B",
                  "RBAEEjAKLENIQUxMRU5HRV9SRVBMWV9FUlJPUl9QQVlMT0FEX1BBUlNJTkdf",
                  "RkFJTEVEEAUSJwojQ0hBTExFTkdFX1JFUExZX0VSUk9SX01FU1NBR0VfRVJS",
                  "T1IQBhIlCiFDSEFMTEVOR0VfUkVQTFlfRVJST1JfTk9fUkVTUE9OU0UQBxIv",
                  "CitDSEFMTEVOR0VfUkVQTFlfRVJST1JfRklOR0VSUFJJTlRfTk9UX0ZPVU5E",
                  "EAgSLQopQ0hBTExFTkdFX1JFUExZX0VSUk9SX0NFUlRfUEFSU0lOR19GQUlM",
                  "RUQQCRI3CjNDSEFMTEVOR0VfUkVQTFlfRVJST1JfQ0VSVF9OT1RfU0lHTkVE",
                  "X0JZX1RSVVNURURfQ0EQChIzCi9DSEFMTEVOR0VfUkVQTFlfRVJST1JfQ0FO",
                  "Tk9UX0VYVFJBQ1RfUFVCTElDX0tFWRALEi8KK0NIQUxMRU5HRV9SRVBMWV9F",
                  "UlJPUl9TSUdORURfQkxPQlNfTUlTTUFUQ0gQDBI7CjdDSEFMTEVOR0VfUkVQ",
                  "TFlfRVJST1JfVExTX0NFUlRfVkFMSURJVFlfUEVSSU9EX1RPT19MT05HEA0S",
                  "PQo5Q0hBTExFTkdFX1JFUExZX0VSUk9SX1RMU19DRVJUX1ZBTElEX1NUQVJU",
                  "X0RBVEVfSU5fRlVUVVJFEA4SKgomQ0hBTExFTkdFX1JFUExZX0VSUk9SX1RM",
                  "U19DRVJUX0VYUElSRUQQDxIlCiFDSEFMTEVOR0VfUkVQTFlfRVJST1JfQ1JM",
                  "X0lOVkFMSUQQEBImCiJDSEFMTEVOR0VfUkVQTFlfRVJST1JfQ0VSVF9SRVZP",
                  "S0VEEBFiBnByb3RvMw=="));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(new[] { typeof(global::Sharpcaster.Models.Protobuf.EventType), typeof(global::Sharpcaster.Models.Protobuf.ChannelAuth), typeof(global::Sharpcaster.Models.Protobuf.ReadyState), typeof(global::Sharpcaster.Models.Protobuf.ConnectionState), typeof(global::Sharpcaster.Models.Protobuf.ReadState), typeof(global::Sharpcaster.Models.Protobuf.WriteState), typeof(global::Sharpcaster.Models.Protobuf.ErrorState), typeof(global::Sharpcaster.Models.Protobuf.ChallengeReplyErrorType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Sharpcaster.Models.Protobuf.SocketEvent), global::Sharpcaster.Models.Protobuf.SocketEvent.Parser, new[]{ "Type", "TimestampMicros", "Details", "NetReturnValue", "MessageNamespace", "ReadyState", "ConnectionState", "ReadState", "WriteState", "ErrorState", "ChallengeReplyErrorType", "NssErrorCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sharpcaster.Models.Protobuf.AggregatedSocketEvent), global::Sharpcaster.Models.Protobuf.AggregatedSocketEvent.Parser, new[]{ "Id", "EndpointId", "ChannelAuthType", "SocketEvent", "BytesRead", "BytesWritten" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Sharpcaster.Models.Protobuf.Log), global::Sharpcaster.Models.Protobuf.Log.Parser, new[]{ "AggregatedSocketEvent", "NumEvictedAggregatedSocketEvents", "NumEvictedSocketEvents" }, null, null, null)
                }));
        }
        #endregion

    }
    #region Enums
    public enum EventType
    {
        [pbr::OriginalName("EVENT_TYPE_UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("CAST_SOCKET_CREATED")] CastSocketCreated = 1,
        [pbr::OriginalName("READY_STATE_CHANGED")] ReadyStateChanged = 2,
        [pbr::OriginalName("CONNECTION_STATE_CHANGED")] ConnectionStateChanged = 3,
        [pbr::OriginalName("READ_STATE_CHANGED")] ReadStateChanged = 4,
        [pbr::OriginalName("WRITE_STATE_CHANGED")] WriteStateChanged = 5,
        [pbr::OriginalName("ERROR_STATE_CHANGED")] ErrorStateChanged = 6,
        [pbr::OriginalName("CONNECT_FAILED")] ConnectFailed = 7,
        /// <summary>
        /// Logged with RV.
        /// </summary>
        [pbr::OriginalName("TCP_SOCKET_CONNECT")] TcpSocketConnect = 8,
        [pbr::OriginalName("TCP_SOCKET_SET_KEEP_ALIVE")] TcpSocketSetKeepAlive = 9,
        [pbr::OriginalName("SSL_CERT_WHITELISTED")] SslCertWhitelisted = 10,
        /// <summary>
        /// Logged with RV.
        /// </summary>
        [pbr::OriginalName("SSL_SOCKET_CONNECT")] SslSocketConnect = 11,
        [pbr::OriginalName("SSL_INFO_OBTAINED")] SslInfoObtained = 12,
        /// <summary>
        /// Logged with RV.
        /// </summary>
        [pbr::OriginalName("DER_ENCODED_CERT_OBTAIN")] DerEncodedCertObtain = 13,
        [pbr::OriginalName("RECEIVED_CHALLENGE_REPLY")] ReceivedChallengeReply = 14,
        [pbr::OriginalName("AUTH_CHALLENGE_REPLY")] AuthChallengeReply = 15,
        [pbr::OriginalName("CONNECT_TIMED_OUT")] ConnectTimedOut = 16,
        [pbr::OriginalName("SEND_MESSAGE_FAILED")] SendMessageFailed = 17,
        /// <summary>
        /// Message
        /// </summary>
        [pbr::OriginalName("MESSAGE_ENQUEUED")] MessageEnqueued = 18,
        /// <summary>
        /// Logged with RV.
        /// </summary>
        [pbr::OriginalName("SOCKET_WRITE")] SocketWrite = 19,
        /// <summary>
        /// Message
        /// </summary>
        [pbr::OriginalName("MESSAGE_WRITTEN")] MessageWritten = 20,
        /// <summary>
        /// Logged with RV.
        /// </summary>
        [pbr::OriginalName("SOCKET_READ")] SocketRead = 21,
        /// <summary>
        /// Message
        /// </summary>
        [pbr::OriginalName("MESSAGE_READ")] MessageRead = 22,
        [pbr::OriginalName("SOCKET_CLOSED")] SocketClosed = 25,
        [pbr::OriginalName("SSL_CERT_EXCESSIVE_LIFETIME")] SslCertExcessiveLifetime = 26,
        [pbr::OriginalName("CHANNEL_POLICY_ENFORCED")] ChannelPolicyEnforced = 27,
        /// <summary>
        /// Logged with RV.
        /// </summary>
        [pbr::OriginalName("TCP_SOCKET_CONNECT_COMPLETE")] TcpSocketConnectComplete = 28,
        /// <summary>
        /// Logged with RV.
        /// </summary>
        [pbr::OriginalName("SSL_SOCKET_CONNECT_COMPLETE")] SslSocketConnectComplete = 29,
        /// <summary>
        /// Logged with RV.
        /// </summary>
        [pbr::OriginalName("SSL_SOCKET_CONNECT_FAILED")] SslSocketConnectFailed = 30,
        /// <summary>
        /// Logged with RV.
        /// </summary>
        [pbr::OriginalName("SEND_AUTH_CHALLENGE_FAILED")] SendAuthChallengeFailed = 31,
        [pbr::OriginalName("AUTH_CHALLENGE_REPLY_INVALID")] AuthChallengeReplyInvalid = 32,
        /// <summary>
        /// Logged with RV.
        /// </summary>
        [pbr::OriginalName("PING_WRITE_ERROR")] PingWriteError = 33,
    }

    public enum ChannelAuth
    {
        [pbr::OriginalName("SSL_UNKNOWN_ZERO")] SslUnknownZero = 0,
        /// <summary>
        /// SSL over TCP.
        /// </summary>
        [pbr::OriginalName("SSL")] Ssl = 1,
        /// <summary>
        /// SSL over TCP with challenge and receiver signature verification.
        /// </summary>
        [pbr::OriginalName("SSL_VERIFIED")] SslVerified = 2,
    }

    public enum ReadyState
    {
        [pbr::OriginalName("READY_STATE_UNKNOWN_ZERO")] UnknownZero = 0,
        [pbr::OriginalName("READY_STATE_NONE")] None = 1,
        [pbr::OriginalName("READY_STATE_CONNECTING")] Connecting = 2,
        [pbr::OriginalName("READY_STATE_OPEN")] Open = 3,
        [pbr::OriginalName("READY_STATE_CLOSING")] Closing = 4,
        [pbr::OriginalName("READY_STATE_CLOSED")] Closed = 5,
    }

    public enum ConnectionState
    {
        [pbr::OriginalName("CONN_STATE_UNKNOWN_ZERO")] ConnStateUnknownZero = 0,
        [pbr::OriginalName("CONN_STATE_UNKNOWN")] ConnStateUnknown = 1,
        [pbr::OriginalName("CONN_STATE_TCP_CONNECT")] ConnStateTcpConnect = 2,
        [pbr::OriginalName("CONN_STATE_TCP_CONNECT_COMPLETE")] ConnStateTcpConnectComplete = 3,
        [pbr::OriginalName("CONN_STATE_SSL_CONNECT")] ConnStateSslConnect = 4,
        [pbr::OriginalName("CONN_STATE_SSL_CONNECT_COMPLETE")] ConnStateSslConnectComplete = 5,
        [pbr::OriginalName("CONN_STATE_AUTH_CHALLENGE_SEND")] ConnStateAuthChallengeSend = 6,
        [pbr::OriginalName("CONN_STATE_AUTH_CHALLENGE_SEND_COMPLETE")] ConnStateAuthChallengeSendComplete = 7,
        [pbr::OriginalName("CONN_STATE_AUTH_CHALLENGE_REPLY_COMPLETE")] ConnStateAuthChallengeReplyComplete = 8,
        [pbr::OriginalName("CONN_STATE_START_CONNECT")] ConnStateStartConnect = 9,
        /// <summary>
        /// Terminal states follow.
        /// </summary>
        [pbr::OriginalName("CONN_STATE_FINISHED")] ConnStateFinished = 100,
        [pbr::OriginalName("CONN_STATE_ERROR")] ConnStateError = 101,
        [pbr::OriginalName("CONN_STATE_TIMEOUT")] ConnStateTimeout = 102,
    }

    public enum ReadState
    {
        [pbr::OriginalName("READ_STATE_UNKNOWN_ZERO")] UnknownZero = 0,
        [pbr::OriginalName("READ_STATE_UNKNOWN")] Unknown = 1,
        [pbr::OriginalName("READ_STATE_READ")] Read = 2,
        [pbr::OriginalName("READ_STATE_READ_COMPLETE")] ReadComplete = 3,
        [pbr::OriginalName("READ_STATE_DO_CALLBACK")] DoCallback = 4,
        [pbr::OriginalName("READ_STATE_HANDLE_ERROR")] HandleError = 5,
        /// <summary>
        /// Terminal state.
        /// </summary>
        [pbr::OriginalName("READ_STATE_ERROR")] Error = 100,
    }

    public enum WriteState
    {
        [pbr::OriginalName("WRITE_STATE_UNKNOWN_ZERO")] UnknownZero = 0,
        [pbr::OriginalName("WRITE_STATE_UNKNOWN")] Unknown = 1,
        [pbr::OriginalName("WRITE_STATE_WRITE")] Write = 2,
        [pbr::OriginalName("WRITE_STATE_WRITE_COMPLETE")] WriteComplete = 3,
        [pbr::OriginalName("WRITE_STATE_DO_CALLBACK")] DoCallback = 4,
        [pbr::OriginalName("WRITE_STATE_HANDLE_ERROR")] HandleError = 5,
        /// <summary>
        /// Terminal states follow.
        /// </summary>
        [pbr::OriginalName("WRITE_STATE_ERROR")] Error = 100,
        [pbr::OriginalName("WRITE_STATE_IDLE")] Idle = 101,
    }

    public enum ErrorState
    {
        [pbr::OriginalName("CHANNEL_ERROR_UNKNOWN_ZERO")] ChannelErrorUnknownZero = 0,
        [pbr::OriginalName("CHANNEL_ERROR_NONE")] ChannelErrorNone = 1,
        [pbr::OriginalName("CHANNEL_ERROR_CHANNEL_NOT_OPEN")] ChannelErrorChannelNotOpen = 2,
        [pbr::OriginalName("CHANNEL_ERROR_AUTHENTICATION_ERROR")] ChannelErrorAuthenticationError = 3,
        [pbr::OriginalName("CHANNEL_ERROR_CONNECT_ERROR")] ChannelErrorConnectError = 4,
        [pbr::OriginalName("CHANNEL_ERROR_SOCKET_ERROR")] ChannelErrorSocketError = 5,
        [pbr::OriginalName("CHANNEL_ERROR_TRANSPORT_ERROR")] ChannelErrorTransportError = 6,
        [pbr::OriginalName("CHANNEL_ERROR_INVALID_MESSAGE")] ChannelErrorInvalidMessage = 7,
        [pbr::OriginalName("CHANNEL_ERROR_INVALID_CHANNEL_ID")] ChannelErrorInvalidChannelId = 8,
        [pbr::OriginalName("CHANNEL_ERROR_CONNECT_TIMEOUT")] ChannelErrorConnectTimeout = 9,
        [pbr::OriginalName("CHANNEL_ERROR_UNKNOWN")] ChannelErrorUnknown = 10,
    }

    public enum ChallengeReplyErrorType
    {
        [pbr::OriginalName("CHALLENGE_REPLY_ERROR_UNKNOWN_ZERO")] ChallengeReplyErrorUnknownZero = 0,
        [pbr::OriginalName("CHALLENGE_REPLY_ERROR_NONE")] ChallengeReplyErrorNone = 1,
        [pbr::OriginalName("CHALLENGE_REPLY_ERROR_PEER_CERT_EMPTY")] ChallengeReplyErrorPeerCertEmpty = 2,
        [pbr::OriginalName("CHALLENGE_REPLY_ERROR_WRONG_PAYLOAD_TYPE")] ChallengeReplyErrorWrongPayloadType = 3,
        [pbr::OriginalName("CHALLENGE_REPLY_ERROR_NO_PAYLOAD")] ChallengeReplyErrorNoPayload = 4,
        [pbr::OriginalName("CHALLENGE_REPLY_ERROR_PAYLOAD_PARSING_FAILED")] ChallengeReplyErrorPayloadParsingFailed = 5,
        [pbr::OriginalName("CHALLENGE_REPLY_ERROR_MESSAGE_ERROR")] ChallengeReplyErrorMessageError = 6,
        [pbr::OriginalName("CHALLENGE_REPLY_ERROR_NO_RESPONSE")] ChallengeReplyErrorNoResponse = 7,
        [pbr::OriginalName("CHALLENGE_REPLY_ERROR_FINGERPRINT_NOT_FOUND")] ChallengeReplyErrorFingerprintNotFound = 8,
        [pbr::OriginalName("CHALLENGE_REPLY_ERROR_CERT_PARSING_FAILED")] ChallengeReplyErrorCertParsingFailed = 9,
        [pbr::OriginalName("CHALLENGE_REPLY_ERROR_CERT_NOT_SIGNED_BY_TRUSTED_CA")] ChallengeReplyErrorCertNotSignedByTrustedCa = 10,
        [pbr::OriginalName("CHALLENGE_REPLY_ERROR_CANNOT_EXTRACT_PUBLIC_KEY")] ChallengeReplyErrorCannotExtractPublicKey = 11,
        [pbr::OriginalName("CHALLENGE_REPLY_ERROR_SIGNED_BLOBS_MISMATCH")] ChallengeReplyErrorSignedBlobsMismatch = 12,
        [pbr::OriginalName("CHALLENGE_REPLY_ERROR_TLS_CERT_VALIDITY_PERIOD_TOO_LONG")] ChallengeReplyErrorTlsCertValidityPeriodTooLong = 13,
        [pbr::OriginalName("CHALLENGE_REPLY_ERROR_TLS_CERT_VALID_START_DATE_IN_FUTURE")] ChallengeReplyErrorTlsCertValidStartDateInFuture = 14,
        [pbr::OriginalName("CHALLENGE_REPLY_ERROR_TLS_CERT_EXPIRED")] ChallengeReplyErrorTlsCertExpired = 15,
        [pbr::OriginalName("CHALLENGE_REPLY_ERROR_CRL_INVALID")] ChallengeReplyErrorCrlInvalid = 16,
        [pbr::OriginalName("CHALLENGE_REPLY_ERROR_CERT_REVOKED")] ChallengeReplyErrorCertRevoked = 17,
    }

    #endregion

    #region Messages
    public sealed partial class SocketEvent : pb::IMessage<SocketEvent>
    {
        private static readonly pb::MessageParser<SocketEvent> _parser = new pb::MessageParser<SocketEvent>(() => new SocketEvent());
        [System.Diagnostics.DebuggerNonUserCode]
        public static pb::MessageParser<SocketEvent> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCode]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Sharpcaster.Models.Protobuf.LoggingReflection.Descriptor.MessageTypes[0]; }
        }

        [System.Diagnostics.DebuggerNonUserCode]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public SocketEvent()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCode]
        public SocketEvent(SocketEvent other) : this()
        {
            type_ = other.type_;
            timestampMicros_ = other.timestampMicros_;
            details_ = other.details_;
            netReturnValue_ = other.netReturnValue_;
            messageNamespace_ = other.messageNamespace_;
            readyState_ = other.readyState_;
            connectionState_ = other.connectionState_;
            readState_ = other.readState_;
            writeState_ = other.writeState_;
            errorState_ = other.errorState_;
            challengeReplyErrorType_ = other.challengeReplyErrorType_;
            nssErrorCode_ = other.nssErrorCode_;
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public SocketEvent Clone()
        {
            return new SocketEvent(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::Sharpcaster.Models.Protobuf.EventType type_ = 0;
        /// <summary>
        /// Required
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCode]
        public global::Sharpcaster.Models.Protobuf.EventType Type
        {
            get { return type_; }
            set
            {
                type_ = value;
            }
        }

        /// <summary>Field number for the "timestamp_micros" field.</summary>
        public const int TimestampMicrosFieldNumber = 2;
        private long timestampMicros_;
        [System.Diagnostics.DebuggerNonUserCode]
        public long TimestampMicros
        {
            get { return timestampMicros_; }
            set
            {
                timestampMicros_ = value;
            }
        }

        /// <summary>Field number for the "details" field.</summary>
        public const int DetailsFieldNumber = 3;
        private string details_ = "";
        [System.Diagnostics.DebuggerNonUserCode]
        public string Details
        {
            get { return details_; }
            set
            {
                details_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "net_return_value" field.</summary>
        public const int NetReturnValueFieldNumber = 4;
        private int netReturnValue_;
        [System.Diagnostics.DebuggerNonUserCode]
        public int NetReturnValue
        {
            get { return netReturnValue_; }
            set
            {
                netReturnValue_ = value;
            }
        }

        /// <summary>Field number for the "message_namespace" field.</summary>
        public const int MessageNamespaceFieldNumber = 5;
        private string messageNamespace_ = "";
        [System.Diagnostics.DebuggerNonUserCode]
        public string MessageNamespace
        {
            get { return messageNamespace_; }
            set
            {
                messageNamespace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "ready_state" field.</summary>
        public const int ReadyStateFieldNumber = 6;
        private global::Sharpcaster.Models.Protobuf.ReadyState readyState_ = 0;
        [System.Diagnostics.DebuggerNonUserCode]
        public global::Sharpcaster.Models.Protobuf.ReadyState ReadyState
        {
            get { return readyState_; }
            set
            {
                readyState_ = value;
            }
        }

        /// <summary>Field number for the "connection_state" field.</summary>
        public const int ConnectionStateFieldNumber = 7;
        private global::Sharpcaster.Models.Protobuf.ConnectionState connectionState_ = 0;
        [System.Diagnostics.DebuggerNonUserCode]
        public global::Sharpcaster.Models.Protobuf.ConnectionState ConnectionState
        {
            get { return connectionState_; }
            set
            {
                connectionState_ = value;
            }
        }

        /// <summary>Field number for the "read_state" field.</summary>
        public const int ReadStateFieldNumber = 8;
        private global::Sharpcaster.Models.Protobuf.ReadState readState_ = 0;
        [System.Diagnostics.DebuggerNonUserCode]
        public global::Sharpcaster.Models.Protobuf.ReadState ReadState
        {
            get { return readState_; }
            set
            {
                readState_ = value;
            }
        }

        /// <summary>Field number for the "write_state" field.</summary>
        public const int WriteStateFieldNumber = 9;
        private global::Sharpcaster.Models.Protobuf.WriteState writeState_ = 0;
        [System.Diagnostics.DebuggerNonUserCode]
        public global::Sharpcaster.Models.Protobuf.WriteState WriteState
        {
            get { return writeState_; }
            set
            {
                writeState_ = value;
            }
        }

        /// <summary>Field number for the "error_state" field.</summary>
        public const int ErrorStateFieldNumber = 10;
        private global::Sharpcaster.Models.Protobuf.ErrorState errorState_ = 0;
        [System.Diagnostics.DebuggerNonUserCode]
        public global::Sharpcaster.Models.Protobuf.ErrorState ErrorState
        {
            get { return errorState_; }
            set
            {
                errorState_ = value;
            }
        }

        /// <summary>Field number for the "challenge_reply_error_type" field.</summary>
        public const int ChallengeReplyErrorTypeFieldNumber = 11;
        private global::Sharpcaster.Models.Protobuf.ChallengeReplyErrorType challengeReplyErrorType_ = 0;
        [System.Diagnostics.DebuggerNonUserCode]
        public global::Sharpcaster.Models.Protobuf.ChallengeReplyErrorType ChallengeReplyErrorType
        {
            get { return challengeReplyErrorType_; }
            set
            {
                challengeReplyErrorType_ = value;
            }
        }

        /// <summary>Field number for the "nss_error_code" field.</summary>
        public const int NssErrorCodeFieldNumber = 12;
        private int nssErrorCode_;
        /// <summary>
        /// No longer used.
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCode]
        public int NssErrorCode
        {
            get { return nssErrorCode_; }
            set
            {
                nssErrorCode_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public override bool Equals(object other)
        {
            return Equals(other as SocketEvent);
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public bool Equals(SocketEvent other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Type != other.Type) return false;
            if (TimestampMicros != other.TimestampMicros) return false;
            if (Details != other.Details) return false;
            if (NetReturnValue != other.NetReturnValue) return false;
            if (MessageNamespace != other.MessageNamespace) return false;
            if (ReadyState != other.ReadyState) return false;
            if (ConnectionState != other.ConnectionState) return false;
            if (ReadState != other.ReadState) return false;
            if (WriteState != other.WriteState) return false;
            if (ErrorState != other.ErrorState) return false;
            if (ChallengeReplyErrorType != other.ChallengeReplyErrorType) return false;
            if (NssErrorCode != other.NssErrorCode) return false;
            return true;
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Type != 0) hash ^= Type.GetHashCode();
            if (TimestampMicros != 0L) hash ^= TimestampMicros.GetHashCode();
            if (Details.Length != 0) hash ^= Details.GetHashCode();
            if (NetReturnValue != 0) hash ^= NetReturnValue.GetHashCode();
            if (MessageNamespace.Length != 0) hash ^= MessageNamespace.GetHashCode();
            if (ReadyState != 0) hash ^= ReadyState.GetHashCode();
            if (ConnectionState != 0) hash ^= ConnectionState.GetHashCode();
            if (ReadState != 0) hash ^= ReadState.GetHashCode();
            if (WriteState != 0) hash ^= WriteState.GetHashCode();
            if (ErrorState != 0) hash ^= ErrorState.GetHashCode();
            if (ChallengeReplyErrorType != 0) hash ^= ChallengeReplyErrorType.GetHashCode();
            if (NssErrorCode != 0) hash ^= NssErrorCode.GetHashCode();
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Type != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Type);
            }
            if (TimestampMicros != 0L)
            {
                output.WriteRawTag(16);
                output.WriteInt64(TimestampMicros);
            }
            if (Details.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(Details);
            }
            if (NetReturnValue != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(NetReturnValue);
            }
            if (MessageNamespace.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteString(MessageNamespace);
            }
            if (ReadyState != 0)
            {
                output.WriteRawTag(48);
                output.WriteEnum((int)ReadyState);
            }
            if (ConnectionState != 0)
            {
                output.WriteRawTag(56);
                output.WriteEnum((int)ConnectionState);
            }
            if (ReadState != 0)
            {
                output.WriteRawTag(64);
                output.WriteEnum((int)ReadState);
            }
            if (WriteState != 0)
            {
                output.WriteRawTag(72);
                output.WriteEnum((int)WriteState);
            }
            if (ErrorState != 0)
            {
                output.WriteRawTag(80);
                output.WriteEnum((int)ErrorState);
            }
            if (ChallengeReplyErrorType != 0)
            {
                output.WriteRawTag(88);
                output.WriteEnum((int)ChallengeReplyErrorType);
            }
            if (NssErrorCode != 0)
            {
                output.WriteRawTag(96);
                output.WriteInt32(NssErrorCode);
            }
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public int CalculateSize()
        {
            int size = 0;
            if (Type != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (TimestampMicros != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimestampMicros);
            }
            if (Details.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Details);
            }
            if (NetReturnValue != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(NetReturnValue);
            }
            if (MessageNamespace.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageNamespace);
            }
            if (ReadyState != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ReadyState);
            }
            if (ConnectionState != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ConnectionState);
            }
            if (ReadState != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ReadState);
            }
            if (WriteState != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)WriteState);
            }
            if (ErrorState != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ErrorState);
            }
            if (ChallengeReplyErrorType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ChallengeReplyErrorType);
            }
            if (NssErrorCode != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(NssErrorCode);
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public void MergeFrom(SocketEvent other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Type != 0)
            {
                Type = other.Type;
            }
            if (other.TimestampMicros != 0L)
            {
                TimestampMicros = other.TimestampMicros;
            }
            if (other.Details.Length != 0)
            {
                Details = other.Details;
            }
            if (other.NetReturnValue != 0)
            {
                NetReturnValue = other.NetReturnValue;
            }
            if (other.MessageNamespace.Length != 0)
            {
                MessageNamespace = other.MessageNamespace;
            }
            if (other.ReadyState != 0)
            {
                ReadyState = other.ReadyState;
            }
            if (other.ConnectionState != 0)
            {
                ConnectionState = other.ConnectionState;
            }
            if (other.ReadState != 0)
            {
                ReadState = other.ReadState;
            }
            if (other.WriteState != 0)
            {
                WriteState = other.WriteState;
            }
            if (other.ErrorState != 0)
            {
                ErrorState = other.ErrorState;
            }
            if (other.ChallengeReplyErrorType != 0)
            {
                ChallengeReplyErrorType = other.ChallengeReplyErrorType;
            }
            if (other.NssErrorCode != 0)
            {
                NssErrorCode = other.NssErrorCode;
            }
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            type_ = (global::Sharpcaster.Models.Protobuf.EventType)input.ReadEnum();
                            break;
                        }
                    case 16:
                        {
                            TimestampMicros = input.ReadInt64();
                            break;
                        }
                    case 26:
                        {
                            Details = input.ReadString();
                            break;
                        }
                    case 32:
                        {
                            NetReturnValue = input.ReadInt32();
                            break;
                        }
                    case 42:
                        {
                            MessageNamespace = input.ReadString();
                            break;
                        }
                    case 48:
                        {
                            readyState_ = (global::Sharpcaster.Models.Protobuf.ReadyState)input.ReadEnum();
                            break;
                        }
                    case 56:
                        {
                            connectionState_ = (global::Sharpcaster.Models.Protobuf.ConnectionState)input.ReadEnum();
                            break;
                        }
                    case 64:
                        {
                            readState_ = (global::Sharpcaster.Models.Protobuf.ReadState)input.ReadEnum();
                            break;
                        }
                    case 72:
                        {
                            writeState_ = (global::Sharpcaster.Models.Protobuf.WriteState)input.ReadEnum();
                            break;
                        }
                    case 80:
                        {
                            errorState_ = (global::Sharpcaster.Models.Protobuf.ErrorState)input.ReadEnum();
                            break;
                        }
                    case 88:
                        {
                            challengeReplyErrorType_ = (global::Sharpcaster.Models.Protobuf.ChallengeReplyErrorType)input.ReadEnum();
                            break;
                        }
                    case 96:
                        {
                            NssErrorCode = input.ReadInt32();
                            break;
                        }
                }
            }
        }
    }

    public sealed partial class AggregatedSocketEvent : pb::IMessage<AggregatedSocketEvent>
    {
        private static readonly pb::MessageParser<AggregatedSocketEvent> _parser = new pb::MessageParser<AggregatedSocketEvent>(() => new AggregatedSocketEvent());
        [System.Diagnostics.DebuggerNonUserCode]
        public static pb::MessageParser<AggregatedSocketEvent> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCode]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Sharpcaster.Models.Protobuf.LoggingReflection.Descriptor.MessageTypes[1]; }
        }

        [System.Diagnostics.DebuggerNonUserCode]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public AggregatedSocketEvent()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCode]
        public AggregatedSocketEvent(AggregatedSocketEvent other) : this()
        {
            id_ = other.id_;
            endpointId_ = other.endpointId_;
            channelAuthType_ = other.channelAuthType_;
            socketEvent_ = other.socketEvent_.Clone();
            bytesRead_ = other.bytesRead_;
            bytesWritten_ = other.bytesWritten_;
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public AggregatedSocketEvent Clone()
        {
            return new AggregatedSocketEvent(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private int id_;
        [System.Diagnostics.DebuggerNonUserCode]
        public int Id
        {
            get { return id_; }
            set
            {
                id_ = value;
            }
        }

        /// <summary>Field number for the "endpoint_id" field.</summary>
        public const int EndpointIdFieldNumber = 2;
        private int endpointId_;
        [System.Diagnostics.DebuggerNonUserCode]
        public int EndpointId
        {
            get { return endpointId_; }
            set
            {
                endpointId_ = value;
            }
        }

        /// <summary>Field number for the "channel_auth_type" field.</summary>
        public const int ChannelAuthTypeFieldNumber = 3;
        private global::Sharpcaster.Models.Protobuf.ChannelAuth channelAuthType_ = 0;
        [System.Diagnostics.DebuggerNonUserCode]
        public global::Sharpcaster.Models.Protobuf.ChannelAuth ChannelAuthType
        {
            get { return channelAuthType_; }
            set
            {
                channelAuthType_ = value;
            }
        }

        /// <summary>Field number for the "socket_event" field.</summary>
        public const int SocketEventFieldNumber = 4;
        private static readonly pb::FieldCodec<global::Sharpcaster.Models.Protobuf.SocketEvent> _repeated_socketEvent_codec
            = pb::FieldCodec.ForMessage(34, global::Sharpcaster.Models.Protobuf.SocketEvent.Parser);
        private readonly pbc::RepeatedField<global::Sharpcaster.Models.Protobuf.SocketEvent> socketEvent_ = new pbc::RepeatedField<global::Sharpcaster.Models.Protobuf.SocketEvent>();
        [System.Diagnostics.DebuggerNonUserCode]
        public pbc::RepeatedField<global::Sharpcaster.Models.Protobuf.SocketEvent> SocketEvent
        {
            get { return socketEvent_; }
        }

        /// <summary>Field number for the "bytes_read" field.</summary>
        public const int BytesReadFieldNumber = 5;
        private long bytesRead_;
        [System.Diagnostics.DebuggerNonUserCode]
        public long BytesRead
        {
            get { return bytesRead_; }
            set
            {
                bytesRead_ = value;
            }
        }

        /// <summary>Field number for the "bytes_written" field.</summary>
        public const int BytesWrittenFieldNumber = 6;
        private long bytesWritten_;
        [System.Diagnostics.DebuggerNonUserCode]
        public long BytesWritten
        {
            get { return bytesWritten_; }
            set
            {
                bytesWritten_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public override bool Equals(object other)
        {
            return Equals(other as AggregatedSocketEvent);
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public bool Equals(AggregatedSocketEvent other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Id != other.Id) return false;
            if (EndpointId != other.EndpointId) return false;
            if (ChannelAuthType != other.ChannelAuthType) return false;
            if (!socketEvent_.Equals(other.socketEvent_)) return false;
            if (BytesRead != other.BytesRead) return false;
            if (BytesWritten != other.BytesWritten) return false;
            return true;
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Id != 0) hash ^= Id.GetHashCode();
            if (EndpointId != 0) hash ^= EndpointId.GetHashCode();
            if (ChannelAuthType != 0) hash ^= ChannelAuthType.GetHashCode();
            hash ^= socketEvent_.GetHashCode();
            if (BytesRead != 0L) hash ^= BytesRead.GetHashCode();
            if (BytesWritten != 0L) hash ^= BytesWritten.GetHashCode();
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Id != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(Id);
            }
            if (EndpointId != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(EndpointId);
            }
            if (ChannelAuthType != 0)
            {
                output.WriteRawTag(24);
                output.WriteEnum((int)ChannelAuthType);
            }
            socketEvent_.WriteTo(output, _repeated_socketEvent_codec);
            if (BytesRead != 0L)
            {
                output.WriteRawTag(40);
                output.WriteInt64(BytesRead);
            }
            if (BytesWritten != 0L)
            {
                output.WriteRawTag(48);
                output.WriteInt64(BytesWritten);
            }
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public int CalculateSize()
        {
            int size = 0;
            if (Id != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
            }
            if (EndpointId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndpointId);
            }
            if (ChannelAuthType != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ChannelAuthType);
            }
            size += socketEvent_.CalculateSize(_repeated_socketEvent_codec);
            if (BytesRead != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(BytesRead);
            }
            if (BytesWritten != 0L)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(BytesWritten);
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public void MergeFrom(AggregatedSocketEvent other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id != 0)
            {
                Id = other.Id;
            }
            if (other.EndpointId != 0)
            {
                EndpointId = other.EndpointId;
            }
            if (other.ChannelAuthType != 0)
            {
                ChannelAuthType = other.ChannelAuthType;
            }
            socketEvent_.Add(other.socketEvent_);
            if (other.BytesRead != 0L)
            {
                BytesRead = other.BytesRead;
            }
            if (other.BytesWritten != 0L)
            {
                BytesWritten = other.BytesWritten;
            }
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            Id = input.ReadInt32();
                            break;
                        }
                    case 16:
                        {
                            EndpointId = input.ReadInt32();
                            break;
                        }
                    case 24:
                        {
                            channelAuthType_ = (global::Sharpcaster.Models.Protobuf.ChannelAuth)input.ReadEnum();
                            break;
                        }
                    case 34:
                        {
                            socketEvent_.AddEntriesFrom(input, _repeated_socketEvent_codec);
                            break;
                        }
                    case 40:
                        {
                            BytesRead = input.ReadInt64();
                            break;
                        }
                    case 48:
                        {
                            BytesWritten = input.ReadInt64();
                            break;
                        }
                }
            }
        }
    }

    public sealed partial class Log : pb::IMessage<Log>
    {
        private static readonly pb::MessageParser<Log> _parser = new pb::MessageParser<Log>(() => new Log());
        [System.Diagnostics.DebuggerNonUserCode]
        public static pb::MessageParser<Log> Parser { get { return _parser; } }

        [System.Diagnostics.DebuggerNonUserCode]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Sharpcaster.Models.Protobuf.LoggingReflection.Descriptor.MessageTypes[2]; }
        }

        [System.Diagnostics.DebuggerNonUserCode]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public Log()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [System.Diagnostics.DebuggerNonUserCode]
        public Log(Log other) : this()
        {
            aggregatedSocketEvent_ = other.aggregatedSocketEvent_.Clone();
            numEvictedAggregatedSocketEvents_ = other.numEvictedAggregatedSocketEvents_;
            numEvictedSocketEvents_ = other.numEvictedSocketEvents_;
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public Log Clone()
        {
            return new Log(this);
        }

        /// <summary>Field number for the "aggregated_socket_event" field.</summary>
        public const int AggregatedSocketEventFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Sharpcaster.Models.Protobuf.AggregatedSocketEvent> _repeated_aggregatedSocketEvent_codec
            = pb::FieldCodec.ForMessage(10, global::Sharpcaster.Models.Protobuf.AggregatedSocketEvent.Parser);
        private readonly pbc::RepeatedField<global::Sharpcaster.Models.Protobuf.AggregatedSocketEvent> aggregatedSocketEvent_ = new pbc::RepeatedField<global::Sharpcaster.Models.Protobuf.AggregatedSocketEvent>();
        /// <summary>
        /// Each AggregatedSocketEvent represents events recorded for a socket.
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCode]
        public pbc::RepeatedField<global::Sharpcaster.Models.Protobuf.AggregatedSocketEvent> AggregatedSocketEvent
        {
            get { return aggregatedSocketEvent_; }
        }

        /// <summary>Field number for the "num_evicted_aggregated_socket_events" field.</summary>
        public const int NumEvictedAggregatedSocketEventsFieldNumber = 2;
        private int numEvictedAggregatedSocketEvents_;
        /// <summary>
        /// Number of socket log entries evicted by the logger due to size constraints.
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCode]
        public int NumEvictedAggregatedSocketEvents
        {
            get { return numEvictedAggregatedSocketEvents_; }
            set
            {
                numEvictedAggregatedSocketEvents_ = value;
            }
        }

        /// <summary>Field number for the "num_evicted_socket_events" field.</summary>
        public const int NumEvictedSocketEventsFieldNumber = 3;
        private int numEvictedSocketEvents_;
        /// <summary>
        /// Number of event log entries evicted by the logger due to size constraints.
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCode]
        public int NumEvictedSocketEvents
        {
            get { return numEvictedSocketEvents_; }
            set
            {
                numEvictedSocketEvents_ = value;
            }
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public override bool Equals(object other)
        {
            return Equals(other as Log);
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public bool Equals(Log other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!aggregatedSocketEvent_.Equals(other.aggregatedSocketEvent_)) return false;
            if (NumEvictedAggregatedSocketEvents != other.NumEvictedAggregatedSocketEvents) return false;
            if (NumEvictedSocketEvents != other.NumEvictedSocketEvents) return false;
            return true;
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= aggregatedSocketEvent_.GetHashCode();
            if (NumEvictedAggregatedSocketEvents != 0) hash ^= NumEvictedAggregatedSocketEvents.GetHashCode();
            if (NumEvictedSocketEvents != 0) hash ^= NumEvictedSocketEvents.GetHashCode();
            return hash;
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public void WriteTo(pb::CodedOutputStream output)
        {
            aggregatedSocketEvent_.WriteTo(output, _repeated_aggregatedSocketEvent_codec);
            if (NumEvictedAggregatedSocketEvents != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(NumEvictedAggregatedSocketEvents);
            }
            if (NumEvictedSocketEvents != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(NumEvictedSocketEvents);
            }
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public int CalculateSize()
        {
            int size = 0;
            size += aggregatedSocketEvent_.CalculateSize(_repeated_aggregatedSocketEvent_codec);
            if (NumEvictedAggregatedSocketEvents != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumEvictedAggregatedSocketEvents);
            }
            if (NumEvictedSocketEvents != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumEvictedSocketEvents);
            }
            return size;
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public void MergeFrom(Log other)
        {
            if (other == null)
            {
                return;
            }
            aggregatedSocketEvent_.Add(other.aggregatedSocketEvent_);
            if (other.NumEvictedAggregatedSocketEvents != 0)
            {
                NumEvictedAggregatedSocketEvents = other.NumEvictedAggregatedSocketEvents;
            }
            if (other.NumEvictedSocketEvents != 0)
            {
                NumEvictedSocketEvents = other.NumEvictedSocketEvents;
            }
        }

        [System.Diagnostics.DebuggerNonUserCode]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            aggregatedSocketEvent_.AddEntriesFrom(input, _repeated_aggregatedSocketEvent_codec);
                            break;
                        }
                    case 16:
                        {
                            NumEvictedAggregatedSocketEvents = input.ReadInt32();
                            break;
                        }
                    case 24:
                        {
                            NumEvictedSocketEvents = input.ReadInt32();
                            break;
                        }
                }
            }
        }
    }

    #endregion

}

#endregion Designer generated code
