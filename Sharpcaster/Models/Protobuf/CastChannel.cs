// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cast_channel.proto
#pragma warning disable // Disable all warnings because generated code is not perfect
#region Designer generated code

using pb = global::Google.Protobuf;
#pragma warning restore IDE0079 // Remove unnecessary suppression
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
namespace Extensions.Api.CastChannel
{
    /// <summary>Holder for reflection information generated from cast_channel.proto</summary>
    public static partial class CastChannelReflection
    {
        #region Descriptor
        /// <summary>File descriptor for cast_channel.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static CastChannelReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "ChJjYXN0X2NoYW5uZWwucHJvdG8SG2V4dGVuc2lvbnMuYXBpLmNhc3RfY2hh",
                  "bm5lbCLjAgoLQ2FzdE1lc3NhZ2USUgoQcHJvdG9jb2xfdmVyc2lvbhgBIAEo",
                  "DjI4LmV4dGVuc2lvbnMuYXBpLmNhc3RfY2hhbm5lbC5DYXN0TWVzc2FnZS5Q",
                  "cm90b2NvbFZlcnNpb24SEQoJc291cmNlX2lkGAIgASgJEhYKDmRlc3RpbmF0",
                  "aW9uX2lkGAMgASgJEhEKCW5hbWVzcGFjZRgEIAEoCRJKCgxwYXlsb2FkX3R5",
                  "cGUYBSABKA4yNC5leHRlbnNpb25zLmFwaS5jYXN0X2NoYW5uZWwuQ2FzdE1l",
                  "c3NhZ2UuUGF5bG9hZFR5cGUSFAoMcGF5bG9hZF91dGY4GAYgASgJEhYKDnBh",
                  "eWxvYWRfYmluYXJ5GAcgASgMIiEKD1Byb3RvY29sVmVyc2lvbhIOCgpDQVNU",
                  "VjJfMV8wEAAiJQoLUGF5bG9hZFR5cGUSCgoGU1RSSU5HEAASCgoGQklOQVJZ",
                  "EAEitwEKDUF1dGhDaGFsbGVuZ2USTAoTc2lnbmF0dXJlX2FsZ29yaXRobRgB",
                  "IAEoDjIvLmV4dGVuc2lvbnMuYXBpLmNhc3RfY2hhbm5lbC5TaWduYXR1cmVB",
                  "bGdvcml0aG0SFAoMc2VuZGVyX25vbmNlGAIgASgMEkIKDmhhc2hfYWxnb3Jp",
                  "dGhtGAMgASgOMiouZXh0ZW5zaW9ucy5hcGkuY2FzdF9jaGFubmVsLkhhc2hB",
                  "bGdvcml0aG0imQIKDEF1dGhSZXNwb25zZRIRCglzaWduYXR1cmUYASABKAwS",
                  "HwoXY2xpZW50X2F1dGhfY2VydGlmaWNhdGUYAiABKAwSIAoYaW50ZXJtZWRp",
                  "YXRlX2NlcnRpZmljYXRlGAMgAygMEkwKE3NpZ25hdHVyZV9hbGdvcml0aG0Y",
                  "BCABKA4yLy5leHRlbnNpb25zLmFwaS5jYXN0X2NoYW5uZWwuU2lnbmF0dXJl",
                  "QWxnb3JpdGhtEhQKDHNlbmRlcl9ub25jZRgFIAEoDBJCCg5oYXNoX2FsZ29y",
                  "aXRobRgGIAEoDjIqLmV4dGVuc2lvbnMuYXBpLmNhc3RfY2hhbm5lbC5IYXNo",
                  "QWxnb3JpdGhtEgsKA2NybBgHIAEoDCKjAQoJQXV0aEVycm9yEkQKCmVycm9y",
                  "X3R5cGUYASABKA4yMC5leHRlbnNpb25zLmFwaS5jYXN0X2NoYW5uZWwuQXV0",
                  "aEVycm9yLkVycm9yVHlwZSJQCglFcnJvclR5cGUSEgoOSU5URVJOQUxfRVJS",
                  "T1IQABIKCgZOT19UTFMQARIjCh9TSUdOQVRVUkVfQUxHT1JJVEhNX1VOQVZB",
                  "SUxBQkxFEAIixgEKEURldmljZUF1dGhNZXNzYWdlEj0KCWNoYWxsZW5nZRgB",
                  "IAEoCzIqLmV4dGVuc2lvbnMuYXBpLmNhc3RfY2hhbm5lbC5BdXRoQ2hhbGxl",
                  "bmdlEjsKCHJlc3BvbnNlGAIgASgLMikuZXh0ZW5zaW9ucy5hcGkuY2FzdF9j",
                  "aGFubmVsLkF1dGhSZXNwb25zZRI1CgVlcnJvchgDIAEoCzImLmV4dGVuc2lv",
                  "bnMuYXBpLmNhc3RfY2hhbm5lbC5BdXRoRXJyb3IqSgoSU2lnbmF0dXJlQWxn",
                  "b3JpdGhtEg8KC1VOU1BFQ0lGSUVEEAASEwoPUlNBU1NBX1BLQ1MxdjE1EAES",
                  "DgoKUlNBU1NBX1BTUxACKiUKDUhhc2hBbGdvcml0aG0SCAoEU0hBMRAAEgoK",
                  "BlNIQTI1NhABYgZwcm90bzM="));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(new[] { typeof(global::Extensions.Api.CastChannel.SignatureAlgorithm), typeof(global::Extensions.Api.CastChannel.HashAlgorithm), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Extensions.Api.CastChannel.CastMessage), global::Extensions.Api.CastChannel.CastMessage.Parser, new[]{ "ProtocolVersion", "SourceId", "DestinationId", "Namespace", "PayloadType", "PayloadUtf8", "PayloadBinary" }, null, new[]{ typeof(global::Extensions.Api.CastChannel.CastMessage.Types.ProtocolVersion), typeof(global::Extensions.Api.CastChannel.CastMessage.Types.PayloadType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Extensions.Api.CastChannel.AuthChallenge), global::Extensions.Api.CastChannel.AuthChallenge.Parser, new[]{ "SignatureAlgorithm", "SenderNonce", "HashAlgorithm" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Extensions.Api.CastChannel.AuthResponse), global::Extensions.Api.CastChannel.AuthResponse.Parser, new[]{ "Signature", "ClientAuthCertificate", "IntermediateCertificate", "SignatureAlgorithm", "SenderNonce", "HashAlgorithm", "Crl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Extensions.Api.CastChannel.AuthError), global::Extensions.Api.CastChannel.AuthError.Parser, new[]{ "ErrorType" }, null, new[]{ typeof(global::Extensions.Api.CastChannel.AuthError.Types.ErrorType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Extensions.Api.CastChannel.DeviceAuthMessage), global::Extensions.Api.CastChannel.DeviceAuthMessage.Parser, new[]{ "Challenge", "Response", "Error" }, null, null, null)
                }));
        }
        #endregion

    }
    #region Enums
    public enum SignatureAlgorithm
    {
        [pbr::OriginalName("UNSPECIFIED")] Unspecified = 0,
        [pbr::OriginalName("RSASSA_PKCS1v15")] RsassaPkcs1V15 = 1,
        [pbr::OriginalName("RSASSA_PSS")] RsassaPss = 2,
    }

    public enum HashAlgorithm
    {
        [pbr::OriginalName("SHA1")] Sha1 = 0,
        [pbr::OriginalName("SHA256")] Sha256 = 1,
    }

    #endregion

    #region Messages
    public sealed partial class CastMessage : pb::IMessage<CastMessage>
    {
        private static readonly pb::MessageParser<CastMessage> _parser = new pb::MessageParser<CastMessage>(() => new CastMessage());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<CastMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Extensions.Api.CastChannel.CastChannelReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CastMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CastMessage(CastMessage other) : this()
        {
            protocolVersion_ = other.protocolVersion_;
            sourceId_ = other.sourceId_;
            destinationId_ = other.destinationId_;
            namespace_ = other.namespace_;
            payloadType_ = other.payloadType_;
            payloadUtf8_ = other.payloadUtf8_;
            payloadBinary_ = other.payloadBinary_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public CastMessage Clone()
        {
            return new CastMessage(this);
        }

        /// <summary>Field number for the "protocol_version" field.</summary>
        public const int ProtocolVersionFieldNumber = 1;
        private global::Extensions.Api.CastChannel.CastMessage.Types.ProtocolVersion protocolVersion_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Extensions.Api.CastChannel.CastMessage.Types.ProtocolVersion ProtocolVersion
        {
            get { return protocolVersion_; }
            set
            {
                protocolVersion_ = value;
            }
        }

        /// <summary>Field number for the "source_id" field.</summary>
        public const int SourceIdFieldNumber = 2;
        private string sourceId_ = "";
        /// <summary>
        /// source and destination ids identify the origin and destination of the
        /// message.  They are used to route messages between endpoints that share a
        /// device-to-device channel.
        ///
        /// For messages between applications:
        ///   - The sender application id is a unique identifier generated on behalf of
        ///     the sender application.
        ///   - The receiver id is always the the session id for the application.
        ///
        /// For messages to or from the sender or receiver platform, the special ids
        /// 'sender-0' and 'receiver-0' can be used.
        ///
        /// For messages intended for all endpoints using a given channel, the
        /// wildcard destination_id '*' can be used.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SourceId
        {
            get { return sourceId_; }
            set
            {
                sourceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "destination_id" field.</summary>
        public const int DestinationIdFieldNumber = 3;
        private string destinationId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DestinationId
        {
            get { return destinationId_; }
            set
            {
                destinationId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "namespace" field.</summary>
        public const int NamespaceFieldNumber = 4;
        private string namespace_ = "";
        /// <summary>
        /// This is the core multiplexing key.  All messages are sent on a namespace
        /// and endpoints sharing a channel listen on one or more namespaces.  The
        /// namespace defines the protocol and semantics of the message.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Namespace
        {
            get { return namespace_; }
            set
            {
                namespace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "payload_type" field.</summary>
        public const int PayloadTypeFieldNumber = 5;
        private global::Extensions.Api.CastChannel.CastMessage.Types.PayloadType payloadType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Extensions.Api.CastChannel.CastMessage.Types.PayloadType PayloadType
        {
            get { return payloadType_; }
            set
            {
                payloadType_ = value;
            }
        }

        /// <summary>Field number for the "payload_utf8" field.</summary>
        public const int PayloadUtf8FieldNumber = 6;
        private string payloadUtf8_ = "";
        /// <summary>
        /// Depending on payload_type, exactly one of the following optional fields
        /// will always be set.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string PayloadUtf8
        {
            get { return payloadUtf8_; }
            set
            {
                payloadUtf8_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "payload_binary" field.</summary>
        public const int PayloadBinaryFieldNumber = 7;
        private pb::ByteString payloadBinary_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString PayloadBinary
        {
            get { return payloadBinary_; }
            set
            {
                payloadBinary_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as CastMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(CastMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ProtocolVersion != other.ProtocolVersion) return false;
            if (SourceId != other.SourceId) return false;
            if (DestinationId != other.DestinationId) return false;
            if (Namespace != other.Namespace) return false;
            if (PayloadType != other.PayloadType) return false;
            if (PayloadUtf8 != other.PayloadUtf8) return false;
            if (PayloadBinary != other.PayloadBinary) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ProtocolVersion != 0) hash ^= ProtocolVersion.GetHashCode();
            if (SourceId.Length != 0) hash ^= SourceId.GetHashCode();
            if (DestinationId.Length != 0) hash ^= DestinationId.GetHashCode();
            if (Namespace.Length != 0) hash ^= Namespace.GetHashCode();
            if (PayloadType != 0) hash ^= PayloadType.GetHashCode();
            if (PayloadUtf8.Length != 0) hash ^= PayloadUtf8.GetHashCode();
            if (PayloadBinary.Length != 0) hash ^= PayloadBinary.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            //if (ProtocolVersion != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int)ProtocolVersion);
            //}
            if (SourceId.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(SourceId);
            }
            if (DestinationId.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(DestinationId);
            }
            if (Namespace.Length != 0)
            {
                output.WriteRawTag(34);
                output.WriteString(Namespace);
            }
            //if (PayloadType != 0) {
            output.WriteRawTag(40);
            output.WriteEnum((int)PayloadType);
            //}
            if (PayloadUtf8.Length != 0)
            {
                output.WriteRawTag(50);
                output.WriteString(PayloadUtf8);
            }
            if (PayloadBinary.Length != 0)
            {
                output.WriteRawTag(58);
                output.WriteBytes(PayloadBinary);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;

            //if (ProtocolVersion != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ProtocolVersion);
            //}
            if (SourceId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(SourceId);
            }
            if (DestinationId.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(DestinationId);
            }
            if (Namespace.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Namespace);
            }
            //if (PayloadType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)PayloadType);
            //}
            if (PayloadUtf8.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(PayloadUtf8);
            }
            if (PayloadBinary.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(PayloadBinary);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(CastMessage other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ProtocolVersion != 0)
            {
                ProtocolVersion = other.ProtocolVersion;
            }
            if (other.SourceId.Length != 0)
            {
                SourceId = other.SourceId;
            }
            if (other.DestinationId.Length != 0)
            {
                DestinationId = other.DestinationId;
            }
            if (other.Namespace.Length != 0)
            {
                Namespace = other.Namespace;
            }
            if (other.PayloadType != 0)
            {
                PayloadType = other.PayloadType;
            }
            if (other.PayloadUtf8.Length != 0)
            {
                PayloadUtf8 = other.PayloadUtf8;
            }
            if (other.PayloadBinary.Length != 0)
            {
                PayloadBinary = other.PayloadBinary;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            protocolVersion_ = (global::Extensions.Api.CastChannel.CastMessage.Types.ProtocolVersion)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            SourceId = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            DestinationId = input.ReadString();
                            break;
                        }
                    case 34:
                        {
                            Namespace = input.ReadString();
                            break;
                        }
                    case 40:
                        {
                            payloadType_ = (global::Extensions.Api.CastChannel.CastMessage.Types.PayloadType)input.ReadEnum();
                            break;
                        }
                    case 50:
                        {
                            PayloadUtf8 = input.ReadString();
                            break;
                        }
                    case 58:
                        {
                            PayloadBinary = input.ReadBytes();
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the CastMessage message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            /// <summary>
            /// Always pass a version of the protocol for future compatibility
            /// requirements.
            /// </summary>
            public enum ProtocolVersion
            {
                [pbr::OriginalName("CASTV2_1_0")] Castv210 = 0,
            }

            /// <summary>
            /// Encoding and payload info follows.
            /// What type of data do we have in this message.
            /// </summary>
            public enum PayloadType
            {
                [pbr::OriginalName("STRING")] String = 0,
                [pbr::OriginalName("BINARY")] Binary = 1,
            }
        }
        #endregion

    }

    /// <summary>
    /// Messages for authentication protocol between a sender and a receiver.
    /// </summary>
    public sealed partial class AuthChallenge : pb::IMessage<AuthChallenge>
    {
        private static readonly pb::MessageParser<AuthChallenge> _parser = new pb::MessageParser<AuthChallenge>(() => new AuthChallenge());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AuthChallenge> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Extensions.Api.CastChannel.CastChannelReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuthChallenge()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuthChallenge(AuthChallenge other) : this()
        {
            signatureAlgorithm_ = other.signatureAlgorithm_;
            senderNonce_ = other.senderNonce_;
            hashAlgorithm_ = other.hashAlgorithm_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuthChallenge Clone()
        {
            return new AuthChallenge(this);
        }

        /// <summary>Field number for the "signature_algorithm" field.</summary>
        public const int SignatureAlgorithmFieldNumber = 1;
        private global::Extensions.Api.CastChannel.SignatureAlgorithm signatureAlgorithm_ = SignatureAlgorithm.RsassaPkcs1V15;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Extensions.Api.CastChannel.SignatureAlgorithm SignatureAlgorithm
        {
            get { return signatureAlgorithm_; }
            set
            {
                signatureAlgorithm_ = value;
            }
        }

        /// <summary>Field number for the "sender_nonce" field.</summary>
        public const int SenderNonceFieldNumber = 2;
        private pb::ByteString senderNonce_ = pb::ByteString.Empty;
        /// <summary>
        ///[default = RSASSA_PKCS1v15];
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString SenderNonce
        {
            get { return senderNonce_; }
            set
            {
                senderNonce_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "hash_algorithm" field.</summary>
        public const int HashAlgorithmFieldNumber = 3;
        private global::Extensions.Api.CastChannel.HashAlgorithm hashAlgorithm_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Extensions.Api.CastChannel.HashAlgorithm HashAlgorithm
        {
            get { return hashAlgorithm_; }
            set
            {
                hashAlgorithm_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AuthChallenge);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AuthChallenge other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (SignatureAlgorithm != other.SignatureAlgorithm) return false;
            if (SenderNonce != other.SenderNonce) return false;
            if (HashAlgorithm != other.HashAlgorithm) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (SignatureAlgorithm != 0) hash ^= SignatureAlgorithm.GetHashCode();
            if (SenderNonce.Length != 0) hash ^= SenderNonce.GetHashCode();
            if (HashAlgorithm != 0) hash ^= HashAlgorithm.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            //if (SignatureAlgorithm != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int)SignatureAlgorithm);
            //}
            if (SenderNonce.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteBytes(SenderNonce);
            }
            //if (HashAlgorithm != 0) {
            output.WriteRawTag(24);
            output.WriteEnum((int)HashAlgorithm);
            //}
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            //if (SignatureAlgorithm != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)SignatureAlgorithm);
            //}
            if (SenderNonce.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(SenderNonce);
            }
            //if (HashAlgorithm != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)HashAlgorithm);
            //}
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AuthChallenge other)
        {
            if (other == null)
            {
                return;
            }
            if (other.SignatureAlgorithm != 0)
            {
                SignatureAlgorithm = other.SignatureAlgorithm;
            }
            if (other.SenderNonce.Length != 0)
            {
                SenderNonce = other.SenderNonce;
            }
            if (other.HashAlgorithm != 0)
            {
                HashAlgorithm = other.HashAlgorithm;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            signatureAlgorithm_ = (global::Extensions.Api.CastChannel.SignatureAlgorithm)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            SenderNonce = input.ReadBytes();
                            break;
                        }
                    case 24:
                        {
                            hashAlgorithm_ = (global::Extensions.Api.CastChannel.HashAlgorithm)input.ReadEnum();
                            break;
                        }
                }
            }
        }
    }

    public sealed partial class AuthResponse : pb::IMessage<AuthResponse>
    {
        private static readonly pb::MessageParser<AuthResponse> _parser = new pb::MessageParser<AuthResponse>(() => new AuthResponse());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AuthResponse> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Extensions.Api.CastChannel.CastChannelReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuthResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuthResponse(AuthResponse other) : this()
        {
            signature_ = other.signature_;
            clientAuthCertificate_ = other.clientAuthCertificate_;
            intermediateCertificate_ = other.intermediateCertificate_.Clone();
            signatureAlgorithm_ = other.signatureAlgorithm_;
            senderNonce_ = other.senderNonce_;
            hashAlgorithm_ = other.hashAlgorithm_;
            crl_ = other.crl_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuthResponse Clone()
        {
            return new AuthResponse(this);
        }

        /// <summary>Field number for the "signature" field.</summary>
        public const int SignatureFieldNumber = 1;
        private pb::ByteString signature_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Signature
        {
            get { return signature_; }
            set
            {
                signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "client_auth_certificate" field.</summary>
        public const int ClientAuthCertificateFieldNumber = 2;
        private pb::ByteString clientAuthCertificate_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString ClientAuthCertificate
        {
            get { return clientAuthCertificate_; }
            set
            {
                clientAuthCertificate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "intermediate_certificate" field.</summary>
        public const int IntermediateCertificateFieldNumber = 3;
        private static readonly pb::FieldCodec<pb::ByteString> _repeated_intermediateCertificate_codec
            = pb::FieldCodec.ForBytes(26);
        private readonly pbc::RepeatedField<pb::ByteString> intermediateCertificate_ = new pbc::RepeatedField<pb::ByteString>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<pb::ByteString> IntermediateCertificate
        {
            get { return intermediateCertificate_; }
        }

        /// <summary>Field number for the "signature_algorithm" field.</summary>
        public const int SignatureAlgorithmFieldNumber = 4;
        private global::Extensions.Api.CastChannel.SignatureAlgorithm signatureAlgorithm_ = SignatureAlgorithm.RsassaPkcs1V15;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Extensions.Api.CastChannel.SignatureAlgorithm SignatureAlgorithm
        {
            get { return signatureAlgorithm_; }
            set
            {
                signatureAlgorithm_ = value;
            }
        }

        /// <summary>Field number for the "sender_nonce" field.</summary>
        public const int SenderNonceFieldNumber = 5;
        private pb::ByteString senderNonce_ = pb::ByteString.Empty;
        /// <summary>
        ///[default = RSASSA_PKCS1v15];
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString SenderNonce
        {
            get { return senderNonce_; }
            set
            {
                senderNonce_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "hash_algorithm" field.</summary>
        public const int HashAlgorithmFieldNumber = 6;
        private global::Extensions.Api.CastChannel.HashAlgorithm hashAlgorithm_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Extensions.Api.CastChannel.HashAlgorithm HashAlgorithm
        {
            get { return hashAlgorithm_; }
            set
            {
                hashAlgorithm_ = value;
            }
        }

        /// <summary>Field number for the "crl" field.</summary>
        public const int CrlFieldNumber = 7;
        private pb::ByteString crl_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Crl
        {
            get { return crl_; }
            set
            {
                crl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AuthResponse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AuthResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Signature != other.Signature) return false;
            if (ClientAuthCertificate != other.ClientAuthCertificate) return false;
            if (!intermediateCertificate_.Equals(other.intermediateCertificate_)) return false;
            if (SignatureAlgorithm != other.SignatureAlgorithm) return false;
            if (SenderNonce != other.SenderNonce) return false;
            if (HashAlgorithm != other.HashAlgorithm) return false;
            if (Crl != other.Crl) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Signature.Length != 0) hash ^= Signature.GetHashCode();
            if (ClientAuthCertificate.Length != 0) hash ^= ClientAuthCertificate.GetHashCode();
            hash ^= intermediateCertificate_.GetHashCode();
            if (SignatureAlgorithm != 0) hash ^= SignatureAlgorithm.GetHashCode();
            if (SenderNonce.Length != 0) hash ^= SenderNonce.GetHashCode();
            if (HashAlgorithm != 0) hash ^= HashAlgorithm.GetHashCode();
            if (Crl.Length != 0) hash ^= Crl.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Signature.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteBytes(Signature);
            }
            if (ClientAuthCertificate.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteBytes(ClientAuthCertificate);
            }
            intermediateCertificate_.WriteTo(output, _repeated_intermediateCertificate_codec);
            //if (SignatureAlgorithm != 0) {
            output.WriteRawTag(32);
            output.WriteEnum((int)SignatureAlgorithm);
            //}
            if (SenderNonce.Length != 0)
            {
                output.WriteRawTag(42);
                output.WriteBytes(SenderNonce);
            }
            //if (HashAlgorithm != 0) {
            output.WriteRawTag(48);
            output.WriteEnum((int)HashAlgorithm);
            //}
            if (Crl.Length != 0)
            {
                output.WriteRawTag(58);
                output.WriteBytes(Crl);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Signature.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
            }
            if (ClientAuthCertificate.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClientAuthCertificate);
            }
            size += intermediateCertificate_.CalculateSize(_repeated_intermediateCertificate_codec);
            //if (SignatureAlgorithm != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)SignatureAlgorithm);
            //}
            if (SenderNonce.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(SenderNonce);
            }
            //if (HashAlgorithm != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)HashAlgorithm);
            //}
            if (Crl.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Crl);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AuthResponse other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Signature.Length != 0)
            {
                Signature = other.Signature;
            }
            if (other.ClientAuthCertificate.Length != 0)
            {
                ClientAuthCertificate = other.ClientAuthCertificate;
            }
            intermediateCertificate_.Add(other.intermediateCertificate_);
            if (other.SignatureAlgorithm != 0)
            {
                SignatureAlgorithm = other.SignatureAlgorithm;
            }
            if (other.SenderNonce.Length != 0)
            {
                SenderNonce = other.SenderNonce;
            }
            if (other.HashAlgorithm != 0)
            {
                HashAlgorithm = other.HashAlgorithm;
            }
            if (other.Crl.Length != 0)
            {
                Crl = other.Crl;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            Signature = input.ReadBytes();
                            break;
                        }
                    case 18:
                        {
                            ClientAuthCertificate = input.ReadBytes();
                            break;
                        }
                    case 26:
                        {
                            intermediateCertificate_.AddEntriesFrom(input, _repeated_intermediateCertificate_codec);
                            break;
                        }
                    case 32:
                        {
                            signatureAlgorithm_ = (global::Extensions.Api.CastChannel.SignatureAlgorithm)input.ReadEnum();
                            break;
                        }
                    case 42:
                        {
                            SenderNonce = input.ReadBytes();
                            break;
                        }
                    case 48:
                        {
                            hashAlgorithm_ = (global::Extensions.Api.CastChannel.HashAlgorithm)input.ReadEnum();
                            break;
                        }
                    case 58:
                        {
                            Crl = input.ReadBytes();
                            break;
                        }
                }
            }
        }
    }

    public sealed partial class AuthError : pb::IMessage<AuthError>
    {
        private static readonly pb::MessageParser<AuthError> _parser = new pb::MessageParser<AuthError>(() => new AuthError());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AuthError> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Extensions.Api.CastChannel.CastChannelReflection.Descriptor.MessageTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuthError()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuthError(AuthError other) : this()
        {
            errorType_ = other.errorType_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuthError Clone()
        {
            return new AuthError(this);
        }

        /// <summary>Field number for the "error_type" field.</summary>
        public const int ErrorTypeFieldNumber = 1;
        private global::Extensions.Api.CastChannel.AuthError.Types.ErrorType errorType_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Extensions.Api.CastChannel.AuthError.Types.ErrorType ErrorType
        {
            get { return errorType_; }
            set
            {
                errorType_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AuthError);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AuthError other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (ErrorType != other.ErrorType) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (ErrorType != 0) hash ^= ErrorType.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            //if (ErrorType != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int)ErrorType);
            //}
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            //if (ErrorType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)ErrorType);
            //}
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AuthError other)
        {
            if (other == null)
            {
                return;
            }
            if (other.ErrorType != 0)
            {
                ErrorType = other.ErrorType;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            errorType_ = (global::Extensions.Api.CastChannel.AuthError.Types.ErrorType)input.ReadEnum();
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the AuthError message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum ErrorType
            {
                [pbr::OriginalName("INTERNAL_ERROR")] InternalError = 0,
                /// <summary>
                /// The underlying connection is not TLS
                /// </summary>
                [pbr::OriginalName("NO_TLS")] NoTls = 1,
                [pbr::OriginalName("SIGNATURE_ALGORITHM_UNAVAILABLE")] SignatureAlgorithmUnavailable = 2,
            }
        }
        #endregion

    }

    public sealed partial class DeviceAuthMessage : pb::IMessage<DeviceAuthMessage>
    {
        private static readonly pb::MessageParser<DeviceAuthMessage> _parser = new pb::MessageParser<DeviceAuthMessage>(() => new DeviceAuthMessage());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DeviceAuthMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Extensions.Api.CastChannel.CastChannelReflection.Descriptor.MessageTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeviceAuthMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeviceAuthMessage(DeviceAuthMessage other) : this()
        {
            Challenge = other.challenge_ != null ? other.Challenge.Clone() : null;
            Response = other.response_ != null ? other.Response.Clone() : null;
            Error = other.error_ != null ? other.Error.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeviceAuthMessage Clone()
        {
            return new DeviceAuthMessage(this);
        }

        /// <summary>Field number for the "challenge" field.</summary>
        public const int ChallengeFieldNumber = 1;
        private global::Extensions.Api.CastChannel.AuthChallenge challenge_;
        /// <summary>
        /// Request fields
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Extensions.Api.CastChannel.AuthChallenge Challenge
        {
            get { return challenge_; }
            set
            {
                challenge_ = value;
            }
        }

        /// <summary>Field number for the "response" field.</summary>
        public const int ResponseFieldNumber = 2;
        private global::Extensions.Api.CastChannel.AuthResponse response_;
        /// <summary>
        /// Response fields
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Extensions.Api.CastChannel.AuthResponse Response
        {
            get { return response_; }
            set
            {
                response_ = value;
            }
        }

        /// <summary>Field number for the "error" field.</summary>
        public const int ErrorFieldNumber = 3;
        private global::Extensions.Api.CastChannel.AuthError error_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Extensions.Api.CastChannel.AuthError Error
        {
            get { return error_; }
            set
            {
                error_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as DeviceAuthMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DeviceAuthMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Challenge, other.Challenge)) return false;
            if (!object.Equals(Response, other.Response)) return false;
            if (!object.Equals(Error, other.Error)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (challenge_ != null) hash ^= Challenge.GetHashCode();
            if (response_ != null) hash ^= Response.GetHashCode();
            if (error_ != null) hash ^= Error.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (challenge_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Challenge);
            }
            if (response_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(Response);
            }
            if (error_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(Error);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (challenge_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Challenge);
            }
            if (response_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Response);
            }
            if (error_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DeviceAuthMessage other)
        {
            if (other == null)
            {
                return;
            }
            if (other.challenge_ != null)
            {
                if (challenge_ == null)
                {
                    challenge_ = new global::Extensions.Api.CastChannel.AuthChallenge();
                }
                Challenge.MergeFrom(other.Challenge);
            }
            if (other.response_ != null)
            {
                if (response_ == null)
                {
                    response_ = new global::Extensions.Api.CastChannel.AuthResponse();
                }
                Response.MergeFrom(other.Response);
            }
            if (other.error_ != null)
            {
                if (error_ == null)
                {
                    error_ = new global::Extensions.Api.CastChannel.AuthError();
                }
                Error.MergeFrom(other.Error);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            if (challenge_ == null)
                            {
                                challenge_ = new global::Extensions.Api.CastChannel.AuthChallenge();
                            }
                            input.ReadMessage(challenge_);
                            break;
                        }
                    case 18:
                        {
                            if (response_ == null)
                            {
                                response_ = new global::Extensions.Api.CastChannel.AuthResponse();
                            }
                            input.ReadMessage(response_);
                            break;
                        }
                    case 26:
                        {
                            if (error_ == null)
                            {
                                error_ = new global::Extensions.Api.CastChannel.AuthError();
                            }
                            input.ReadMessage(error_);
                            break;
                        }
                }
            }
        }
    }

    #endregion

}

#endregion Designer generated code
